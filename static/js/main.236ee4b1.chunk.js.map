{"version":3,"sources":["components/ToolTip/ToolTip.tsx","components/QuizMaker/QuestionMaker/QuestionMaker.tsx","classes/Question.ts","components/QuizMaker/QuizMaker.tsx","App.tsx","index.tsx"],"names":["ToolTip","children","hoverText","onClick","className","QuestionMaker","question","index","changeQuestionValues","quizLength","changeQuestionIndex","deleteQuestion","newIndex","window","prompt","test","type","value","questionText","onChange","newTextEvent","target","placeholder","required","spellCheck","questionType","title","newSelectionEvent","oldQuestionType","answerChoices","correctAnswersIndexes","filter","val","undefined","disabled","map","ind","name","checked","includes","checkboxIndex","aCorrectIndex","sort","a","b","toggleCheckbox","htmlFor","e","answerChoiceIndex","changeAnswerChoiceText","_","deleteAnswerChoice","icon","faTrashAlt","size","color","faPlus","Question","params","this","key","QuizMaker","useState","questionMakers","setQuestionMakers","data","setData","shouldLiveUpdate","setShouldLiveUpdate","useEffect","JSON","stringify","newValue","prev","prevValue","modify","prevIndex","newPrev","i","slice","before","after","confirm","id","length","navigator","clipboard","writeText","filename","blob","Blob","href","URL","createObjectURL","link","document","createElement","download","querySelector","appendChild","click","removeChild","saveToJSONFile","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"mUAUe,SAASA,EAAT,GAA0F,IAAvEC,EAAsE,EAAtEA,SAAUC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,UAC9D,OACE,uBAAMA,UAAS,kBAAaA,GAAaD,QAASA,EAAlD,UACGF,EACD,qBAAKG,UAAU,cAAf,SAA8BF,O,wBCErB,SAASG,EAAT,GAAwI,IAAD,EAA9GC,EAA8G,EAA9GA,SAAUC,EAAoG,EAApGA,MAAOC,EAA6F,EAA7FA,qBAAsBC,EAAuE,EAAvEA,WAAYC,EAA2D,EAA3DA,oBAAqBC,EAAsC,EAAtCA,eAyH9G,OACE,sBAAKP,UAAU,gBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,cAAC,EAAD,CAASD,QAxFU,WAQvB,IAHA,IAAIS,EAA0BC,OAAOC,OAAO,iDAG/B,CAGX,GAAiB,OAAbF,EAAmB,OAavB,GAAK,UAAUG,KAAKH,EAAW,IAG1B,OAAKA,GAAY,IAAMA,EAAWH,GAGlC,MAH8CG,EAAWC,OAAOC,OAAP,yBAAgCF,EAAhC,uCAAuEH,EAAvE,gDAH1BG,EAAWC,OAAOC,OAAP,yBAAgCF,GAAY,UAA5C,uDAYjDF,GAAqBE,EAAW,EAAGL,IAoDKH,UAAU,cAAcF,UAAU,sCAAtE,mBAAgHK,EAAQ,EAAxH,QACA,uBAAOS,KAAK,OAAOC,MAAOX,EAASY,aAAcC,SA5H/B,SAACC,GAGvBZ,EAAqB,CAAEU,aAAcE,EAAaC,OAAOJ,OAASV,IAyHce,YAAY,wBAAwBC,UAAQ,EAACC,YAAY,IACrI,yBAAQP,MAAOX,EAASmB,aAAcC,MAAM,0CAA0CP,SAvHpE,SAACQ,GAAsD,IAGzDC,EAA0DtB,EAAxEmB,aAA+BI,EAAyCvB,EAAzCuB,cAAeC,EAA0BxB,EAA1BwB,sBAChDL,EAAeE,EAAkBN,OAAOJ,MAC5C,GAAIQ,IAAiBG,EAArB,CAEA,OAAQH,GACN,IAAK,UACL,IAAK,gBACHI,EAAgB,GAChBC,EAAwB,GACxB,MACF,IAAK,kBACHA,EAAwB,CAACA,EAAsB,IAAIC,QAAO,SAACC,GAAD,YAAiBC,IAARD,KACnE,MACF,IAAK,aACHH,EAAgB,CAAC,OAAQ,SACzBC,EAAwB,GACxB,MACF,IAAK,SACHD,EAAgB,CAAC,MAAO,MACxBC,EAAwB,GAI5BtB,EAAqB,CAAEiB,eAAcI,gBAAeC,yBAAyBvB,KA6FwCgB,UAAQ,EAAzH,UACE,wBAAQN,MAAM,UAAUiB,UAAQ,EAAhC,8BAGA,wBAAQjB,MAAM,gBAAd,2BACA,wBAAQA,MAAM,kBAAd,6BACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,aAAd,2BACA,wBAAQA,MAAM,SAAd,6BAIuB,YAA1BX,EAASmB,cAAwD,kBAA1BnB,EAASmB,cAC/C,qBAAKrB,UAAU,yBAAf,SACE,oBAAIY,KAAK,IAAT,mBACGV,EAASuB,qBADZ,aACG,EAAwBM,KAAI,SAACH,EAAKI,GACjC,OACE,iCACE,uBAAOpB,KAAgC,cAA1BV,EAASmB,aAA+B,WAAa,QAASY,KAAI,yBAAoB9B,GAASU,MAAOe,EAAKM,QAAShC,EAASwB,sBAAsBS,SAASH,GAAMjB,SAAU,kBA3ClL,SAACqB,GAA2B,IAC3CV,EAA0BxB,EAA1BwB,sBAGJA,EADEA,EAAsBS,SAASC,GACTV,EAAsBC,QAAO,SAACU,GAAD,OAAmBA,IAAkBD,KAErE,sBAAOV,GAAP,CAA8BU,IAKnDV,EAF4B,cAA1BxB,EAASmB,aAEaK,EAAsBC,QAAO,SAACU,GAAD,OAAmBA,IAAkBD,KAGlEV,EAAsBY,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAGnEpC,EAAqB,CAAEsB,yBAAyBvB,GA0B6JsC,CAAeT,MAC9M,uBAAOU,QAASd,EAAhB,SACE,6BAC6B,oBAA1B1B,EAASmB,cAAgE,cAA1BnB,EAASmB,aACvD,mCACE,uBAAOT,KAAK,OAAOC,MAAOe,EAAKb,SAAU,SAAC4B,GAAD,OAtElC,SAAC3B,EAA6C4B,GAA+B,IACpGnB,EAAkBvB,EAAlBuB,cAGNA,EAAgBA,EAAcM,KAAI,SAACH,EAAKI,GAAN,OAAeA,IAAQY,EAAoBhB,EAAOZ,EAAaC,OAAOJ,SAExGT,EAAqB,CAAEqB,iBAAiBtB,GAgE8B0C,CAAuBF,EAAGX,IAAMd,YAAY,6BAA6BE,YAAY,MAGvI,mCACE,+BAAOQ,OAPJI,MAYiB,oBAA1B9B,EAASmB,cAAgE,cAA1BnB,EAASmB,eACxD,wBAAQtB,QAAS,kBAvER,SAAC6C,GAA+B,IACnDnB,EAAyCvB,EAAzCuB,cAAeC,EAA0BxB,EAA1BwB,sBAGrBD,EAAgBA,EAAcE,QAAO,SAACmB,EAAGd,GAAJ,OAAYA,IAAQY,KAEzDlB,EAAwBA,EACrBC,QAAO,SAACU,GAAD,OAAmBA,IAAkBO,KAC5Cb,KAAI,SAACM,GAAD,OAAoBA,EAAgBO,EAAoBP,EAAgB,EAAIA,KAEnFjC,EAAqB,CAAEqB,gBAAeC,yBAAyBvB,GA6DxB4C,CAAmBf,IAA1C,SACE,cAAC,IAAD,CAAiBgB,KAAMC,IAAYC,KAAK,KAAKC,MAAM,cAjB9CnB,UA2BM,oBAA1B9B,EAASmB,cAAgE,cAA1BnB,EAASmB,aACvD,wBAAQtB,QAhGU,WACtBK,EAAqB,CAAEqB,cAAc,GAAD,mBAAMvB,EAASuB,eAAf,CAA8B,MAAOtB,IA+FnCH,UAAU,wBAA5C,SACE,cAAC,IAAD,CAAiBgD,KAAMI,IAAQD,MAAM,QAAQD,KAAK,KAAKlD,UAAU,0BAGnE,uBAEF,uBACA,wBAAQD,QAASQ,EAAeJ,GAAQH,UAAU,4BAAlD,SACE,cAAC,IAAD,CAAiBgD,KAAMC,IAAYE,MAAM,QAAQD,KAAK,KAAKlD,UAAU,iC,0BC1LxDqD,E,WAMnB,aAAkE,IAAtDC,EAAqD,uDAAzB,GAAyB,yBAL1DxC,kBAK0D,OAJ1DO,kBAI0D,OAH1DI,mBAG0D,OAF1DC,2BAE0D,EAC/D6B,KAAKzC,cAAqB,OAANwC,QAAM,IAANA,OAAA,EAAAA,EAAQxC,eAAgB,GAC5CyC,KAAKlC,cAAqB,OAANiC,QAAM,IAANA,OAAA,EAAAA,EAAQjC,eAAgB,UAC5CkC,KAAK9B,cAAgB,GACrB8B,KAAK7B,sBAAwB,G,qDAGqC,IAAtD4B,EAAqD,uDAAzB,GACxC,IAAK,IAAME,KAAOF,EAGhBC,KAAKC,GAAOF,EAAOE,GAGrB,OAAOD,S,KCtBI,SAASE,IAAa,IAAD,EACUC,mBAAqB,IAD/B,mBAC3BC,EAD2B,KACXC,EADW,OAEVF,mBAAiB,IAFP,mBAE3BG,EAF2B,KAErBC,EAFqB,OAGcJ,oBAAkB,kBAAM,KAHtC,mBAG3BK,EAH2B,KAGTC,EAHS,KAKlCC,qBAAU,WACJF,GAAkBD,EAAQI,KAAKC,UAAUR,EAAgB,KAAM,MAClE,CAACA,EAAgBG,EAASC,IAE7B,IAKM3D,EAAuB,SAACgE,EAA6BjE,GAOzDyD,GAAkB,SAACS,GACjB,OAAOA,EAAKtC,KAAI,SAACuC,EAAWtC,GAAZ,OAAqBA,IAAQ7B,EAAQmE,EAAYA,EAAUC,OAAOH,UAIhF9D,EAAsB,SAACE,EAAkBgE,GAI7CZ,GAAkB,SAACS,GAEjB,IAAMnE,EAAWmE,EAAKG,GAIhBC,EAAUJ,EAAK1C,QAAO,SAACmB,EAAG4B,GAAJ,OAAUA,IAAMF,KANlB,EAUF,CAACC,EAAQE,MAAM,EAAGnE,GAAWiE,EAAQE,MAAMnE,IAA5DoE,EAVmB,KAUXC,EAVW,KAc1B,MAAM,GAAN,mBAAWD,GAAX,CAAmB1E,GAAnB,YAAgC2E,QAI9BtE,EAAiB,SAACJ,GAAD,OAAmB,WAYVM,OAAOqE,QAAQ,2EAM3ClB,GAAkB,SAACS,GAAD,OAAUA,EAAK1C,QAAO,SAACmB,EAAG4B,GAAJ,OAAUA,IAAMvE,UAe5D,OACE,qCACE,sBAAKH,UAAU,YAAf,UACE,2CACA,qBAAK+E,GAAG,yBAAR,SACGpB,EAAe5B,KAAI,SAAC7B,EAAU8B,GAAX,OAClB,cAAC,EAAD,CAAyB7B,MAAO6B,EAAK9B,SAAUA,EAAUE,qBAAsBA,EAAsBC,WAAYsD,EAAeqB,OAAQ1E,oBAAqBA,EAAqBC,eAAgBA,GAA9KyB,QAGxB,wBAAQjC,QAjFW,WAEvB6D,GAAkB,SAACS,GAAD,4BAAcA,GAAd,CAAoB,IAAIhB,QA+EHrD,UAAU,yBAA7C,SACE,cAAC,IAAD,CAAiBgD,KAAMI,IAAQpD,UAAU,uBAAuBmD,MAAM,QAAQD,KAAK,YAGvF,uBACA,wBAAQnD,QAAS,kBAAM+D,EAAQI,KAAKC,UAAUR,EAAgB,KAAM,KAApE,oBACA,yBAAQ5D,QAAS,kBAAMiE,GAAoB,SAACK,GAAD,OAAWA,MAAtD,sCAAgFN,MAC/EF,GACC,qCACE,uBACA,wBAAQ9D,QAAS,kBAAMkF,UAAUC,UAAUC,UAAUtB,IAArD,kBACA,wBAAQ9D,QAAS,kBA/BF,SAAC8D,EAAcuB,GAAsB,IAAD,IACnDC,EAAO,IAAIC,KAAK,CAACzB,GAAO,CAAEjD,KAAM,qBAChC2E,EAAOC,IAAIC,gBAAgBJ,GAC3BK,EAAOC,SAASC,cAAc,KACpCF,EAAKH,KAAOA,EACZG,EAAKG,SAAL,UAAmBT,EAAnB,SACA,UAAAO,SAASG,cAAc,gBAAvB,SAAiCC,YAAYL,GAC7CA,EAAKM,QACL,UAAAL,SAASG,cAAc,gBAAvB,SAAiCG,YAAYP,GAuBhBQ,CAAerC,EAAM,SAA5C,+BACA,8BAAMA,UCjGDsC,MARf,WACE,OACE,qBAAKnG,UAAU,MAAf,SACE,cAAC,EAAD,OCFNoG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFX,SAASY,eAAe,W","file":"static/js/main.236ee4b1.chunk.js","sourcesContent":["import React, { ReactChild } from 'react';\r\nimport './ToolTip.scss';\r\n\r\ninterface ToolTipProps {\r\n  children: ReactChild | ReactChild[] | string | string[];\r\n  hoverText: string;\r\n  onClick?: (any: any) => any;\r\n  className?: string;\r\n}\r\n\r\nexport default function ToolTip({ children, hoverText, onClick, className }: ToolTipProps): JSX.Element {\r\n  return (\r\n    <span className={`ToolTip ${className}`} onClick={onClick}>\r\n      {children}\r\n      <div className=\"ToolTipText\">{hoverText}</div>\r\n    </span>\r\n  );\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\nimport ToolTip from '../../ToolTip/ToolTip';\r\nimport './QuestionMaker.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport Question, { QuestionInterface, QuestionTypeType } from '../../../classes/Question';\r\n\r\nexport interface QuestionMakerProps {\r\n  question: Question;\r\n  index: number;\r\n  changeQuestionValues: (newValue: QuestionInterface, index: number) => void;\r\n  quizLength: number;\r\n  changeQuestionIndex: (newIndex: number, prevIndex: number) => void;\r\n  deleteQuestion: (index: number) => () => void;\r\n}\r\n\r\nexport default function QuestionMaker({ question, index, changeQuestionValues, quizLength, changeQuestionIndex, deleteQuestion }: QuestionMakerProps) {\r\n  const setQuestionText = (newTextEvent: ChangeEvent<HTMLInputElement>) => {\r\n    // This function changes the text of the input element,\r\n    // and pushes it up to the parent's state changer function.\r\n    changeQuestionValues({ questionText: newTextEvent.target.value }, index);\r\n  };\r\n\r\n  const setQuestionType = (newSelectionEvent: ChangeEvent<HTMLSelectElement>) => {\r\n    // This function changes the question type of the select element,\r\n    // and pushes it up to the parent's state changer function.\r\n    let { questionType: oldQuestionType, answerChoices, correctAnswersIndexes } = question;\r\n    let questionType = newSelectionEvent.target.value as QuestionTypeType;\r\n    if (questionType === oldQuestionType) return;\r\n\r\n    switch (questionType) {\r\n      case 'default':\r\n      case 'free-response':\r\n        answerChoices = [];\r\n        correctAnswersIndexes = [];\r\n        break;\r\n      case 'multiple-choice':\r\n        correctAnswersIndexes = [correctAnswersIndexes[0]].filter((val) => val !== undefined);\r\n        break;\r\n      case 'true-false':\r\n        answerChoices = ['True', 'False'];\r\n        correctAnswersIndexes = [];\r\n        break;\r\n      case 'yes-no':\r\n        answerChoices = ['Yes', 'No'];\r\n        correctAnswersIndexes = [];\r\n        break;\r\n    }\r\n\r\n    changeQuestionValues({ questionType, answerChoices, correctAnswersIndexes }, index);\r\n  };\r\n\r\n  const setQuestionIndex = () => {\r\n    // This function changes the index of the question in the parent's array.\r\n    // (This just changes the question number and ordering)\r\n\r\n    // Ask for what number this question should change to\r\n    let newIndex: string | null = window.prompt('What number should this question change to?');\r\n\r\n    // Validate the response...\r\n    while (true) {\r\n      // If they press cancel, null is given, so we want to\r\n      // completely break out of this function.\r\n      if (newIndex === null) return;\r\n\r\n      // Use a regex to test if it's not a number\r\n      /*\r\n       * !/^-?\\d+$/\r\n       * !            Invert the output\r\n       *  /           Start the regex\r\n       *   ^          Pattern matches from the very beginning\r\n       *    -?        Optional negative sign, so 0 or 1 negative signs\r\n       *      \\d+     \\d means any digit 0-9, and the + means 1 or more, so 1 or more than 1 digits\r\n       *         $    Pattern matches to the very end\r\n       *          /   End the regex\r\n       */\r\n      if (!/^-?\\d+$/.test(newIndex + '')) newIndex = window.prompt(`Your input of \"${newIndex || '<empty>'}\" is invalid. Enter a new value, or select cancel.`);\r\n      // So if it is a number, we need to make sure it's in the range.\r\n      // If it isn't, give an error and reprompt.\r\n      else if (+newIndex <= 0 || +newIndex > quizLength) newIndex = window.prompt(`Your input of \"${newIndex}\" is outside of the range 1-${quizLength}. Enter a new value, or select cancel.`);\r\n      // So if it is a number, and it's in range,\r\n      // then break out of the verification loop.\r\n      else break;\r\n    }\r\n\r\n    // Pass this info to the parent's changeQuestionIndex function.\r\n    // We need to convert the number from a string into a number,\r\n    // add subtract 1 to make it 0-indexed.\r\n    changeQuestionIndex(+newIndex - 1, index);\r\n  };\r\n\r\n  const addAnswerChoice = () => {\r\n    changeQuestionValues({ answerChoices: [...question.answerChoices, ''] }, index);\r\n  };\r\n\r\n  const changeAnswerChoiceText = (newTextEvent: ChangeEvent<HTMLInputElement>, answerChoiceIndex: number) => {\r\n    let { answerChoices } = question;\r\n\r\n    // Change the text at the given index to the new value\r\n    answerChoices = answerChoices.map((val, ind) => (ind !== answerChoiceIndex ? val : (newTextEvent.target.value as QuestionTypeType)));\r\n\r\n    changeQuestionValues({ answerChoices }, index);\r\n  };\r\n\r\n  const deleteAnswerChoice = (answerChoiceIndex: number) => {\r\n    let { answerChoices, correctAnswersIndexes } = question;\r\n\r\n    // Filter out the answer at the given index\r\n    answerChoices = answerChoices.filter((_, ind) => ind !== answerChoiceIndex);\r\n\r\n    correctAnswersIndexes = correctAnswersIndexes\r\n      .filter((aCorrectIndex) => aCorrectIndex !== answerChoiceIndex) // Remove this question from the correct answers, if it's in there\r\n      .map((aCorrectIndex) => (aCorrectIndex > answerChoiceIndex ? aCorrectIndex - 1 : aCorrectIndex)); // Shift the indexes down if they're after the current question index\r\n\r\n    changeQuestionValues({ answerChoices, correctAnswersIndexes }, index);\r\n  };\r\n\r\n  const toggleCheckbox = (checkboxIndex: number) => {\r\n    let { correctAnswersIndexes } = question;\r\n    // If it is already selected, remove it from the selection list, otherwise add it\r\n    if (correctAnswersIndexes.includes(checkboxIndex)) {\r\n      correctAnswersIndexes = correctAnswersIndexes.filter((aCorrectIndex) => aCorrectIndex !== checkboxIndex);\r\n    } else {\r\n      correctAnswersIndexes = [...correctAnswersIndexes, checkboxIndex];\r\n    }\r\n\r\n    if (question.questionType !== 'check-box') {\r\n      // Filter out everything that isn't the given index\r\n      correctAnswersIndexes = correctAnswersIndexes.filter((aCorrectIndex) => aCorrectIndex === checkboxIndex);\r\n    } else {\r\n      // Sort so that the data is organized\r\n      correctAnswersIndexes = correctAnswersIndexes.sort((a, b) => a - b);\r\n    }\r\n\r\n    changeQuestionValues({ correctAnswersIndexes }, index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"QuestionMaker\">\r\n      <div className=\"QuestionNameSection\">\r\n        <ToolTip onClick={setQuestionIndex} className=\"ChangeIndex\" hoverText=\"Click to change the question number\">{`${index + 1}. `}</ToolTip>\r\n        <input type=\"text\" value={question.questionText} onChange={setQuestionText} placeholder=\"Question goes here...\" required spellCheck={true}></input>\r\n        <select value={question.questionType} title=\"Select what kind of question this is...\" onChange={setQuestionType} required>\r\n          <option value=\"default\" disabled>\r\n            Type of question\r\n          </option>\r\n          <option value=\"free-response\">Free Response</option>\r\n          <option value=\"multiple-choice\">Multiple Choice</option>\r\n          <option value=\"check-box\">Check Box</option>\r\n          <option value=\"true-false\">True or False</option>\r\n          <option value=\"yes-no\">Yes or No</option>\r\n        </select>\r\n      </div>\r\n\r\n      {question.questionType !== 'default' && question.questionType !== 'free-response' && (\r\n        <div className=\"QuestionAnswersSection\">\r\n          <ol type=\"A\">\r\n            {question.answerChoices?.map((val, ind) => {\r\n              return (\r\n                <span key={ind}>\r\n                  <input type={question.questionType === 'check-box' ? 'checkbox' : 'radio'} name={`correct-answer-${index}`} value={val} checked={question.correctAnswersIndexes.includes(ind)} onChange={() => toggleCheckbox(ind)} />\r\n                  <label htmlFor={val}>\r\n                    <li key={ind}>\r\n                      {question.questionType === 'multiple-choice' || question.questionType === 'check-box' ? (\r\n                        <>\r\n                          <input type=\"text\" value={val} onChange={(e) => changeAnswerChoiceText(e, ind)} placeholder=\"Answer choice goes here...\" spellCheck={true} />\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <span>{val}</span>\r\n                        </>\r\n                      )}\r\n                    </li>\r\n                  </label>\r\n                  {(question.questionType === 'multiple-choice' || question.questionType === 'check-box') && (\r\n                    <button onClick={() => deleteAnswerChoice(ind)}>\r\n                      <FontAwesomeIcon icon={faTrashAlt} size=\"lg\" color=\"white\"></FontAwesomeIcon>\r\n                    </button>\r\n                  )}\r\n                </span>\r\n              );\r\n            })}\r\n          </ol>\r\n        </div>\r\n      )}\r\n\r\n      {question.questionType === 'multiple-choice' || question.questionType === 'check-box' ? (\r\n        <button onClick={addAnswerChoice} className=\"AddAnswerChoiceButton\">\r\n          <FontAwesomeIcon icon={faPlus} color=\"white\" size=\"lg\" className=\"AddAnswerChoiceIcon\"></FontAwesomeIcon>\r\n        </button>\r\n      ) : (\r\n        <br />\r\n      )}\r\n      <hr />\r\n      <button onClick={deleteQuestion(index)} className=\"RemoveQuestionMakerButton\">\r\n        <FontAwesomeIcon icon={faTrashAlt} color=\"white\" size=\"lg\" className=\"RemoveQuestionMakerIcon\"></FontAwesomeIcon>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","export type QuestionTypeType = 'default' | 'free-response' | 'multiple-choice' | 'check-box' | 'true-false' | 'yes-no';\r\n\r\nexport interface QuestionInterface {\r\n  questionText?: string;\r\n  questionType?: QuestionTypeType;\r\n  answerChoices?: string[];\r\n  correctAnswersIndexes?: number[];\r\n}\r\n\r\nexport default class Question {\r\n  public questionText: string;\r\n  public questionType: QuestionTypeType;\r\n  public answerChoices: string[];\r\n  public correctAnswersIndexes: number[];\r\n\r\n  constructor(params: QuestionInterface = {} as QuestionInterface) {\r\n    this.questionText = params?.questionText || '';\r\n    this.questionType = params?.questionType || 'default';\r\n    this.answerChoices = [];\r\n    this.correctAnswersIndexes = [];\r\n  }\r\n\r\n  public modify(params: QuestionInterface = {} as QuestionInterface) {\r\n    for (const key in params) {\r\n      // @ts-ignore\r\n      // See comment [1] below for explanation.\r\n      this[key] = params[key];\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\n/*\r\n[1]: Why I used @ts-ignore there:\r\n  1) It's the simplest solution\r\n  2) I already know that <params> has to only have key-value pairs that <this> has\r\n  3) There are ways around using @ts-ignore, but every solution that I found lost type safety too, so they are pointless.\r\n     One of them even made it so that QuestionInterface and Question could accept any key-value pairs, and that defeats the purpose of TypeScript.\r\n  4) This could've been solved by modifying `tsconfig.json` to allow all explicit any, but that also defeats the purpose of TypeScript.\r\n*/\r\n","import React, { useEffect, useState } from 'react';\r\nimport QuestionMaker from './QuestionMaker/QuestionMaker';\r\nimport './QuizMaker.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport Question, { QuestionInterface } from '../../classes/Question';\r\n\r\nexport default function QuizMaker() {\r\n  const [questionMakers, setQuestionMakers] = useState<Question[]>([]);\r\n  const [data, setData] = useState<string>('');\r\n  const [shouldLiveUpdate, setShouldLiveUpdate] = useState<boolean>(() => false);\r\n\r\n  useEffect(() => {\r\n    if (shouldLiveUpdate) setData(JSON.stringify(questionMakers, null, 2));\r\n  }, [questionMakers, setData, shouldLiveUpdate]);\r\n\r\n  const addQuestionMaker = () => {\r\n    // Add a blank Question to the array of QuestionMakers\r\n    setQuestionMakers((prev) => [...prev, new Question()]);\r\n  };\r\n\r\n  const changeQuestionValues = (newValue: QuestionInterface, index: number): void => {\r\n    // This just changes the element at the specified index\r\n    // to the specified new value, but keep others the same.\r\n    //\r\n    // Loop through every element in the array of QuestionMakers.\r\n    // If the index is not the specified index, just return the original value.\r\n    // If the index is the specified index, then return the new value.\r\n    setQuestionMakers((prev) => {\r\n      return prev.map((prevValue, ind) => (ind !== index ? prevValue : prevValue.modify(newValue)));\r\n    });\r\n  };\r\n\r\n  const changeQuestionIndex = (newIndex: number, prevIndex: number): void => {\r\n    // This basically pops a QuestionMaker out of the array and inserts it\r\n    // at the new index that is specified.\r\n\r\n    setQuestionMakers((prev) => {\r\n      // Get the original question\r\n      const question = prev[prevIndex];\r\n\r\n      // Filter out the original question, so that all\r\n      // that you have left is everything except the given index.\r\n      const newPrev = prev.filter((_, i) => i !== prevIndex);\r\n\r\n      // Get everything that would be before the new slot,\r\n      // and everything that would be after the new slot.\r\n      const [before, after] = [newPrev.slice(0, newIndex), newPrev.slice(newIndex)];\r\n\r\n      // Return the new combined array, with the question\r\n      // inserted between the before part and the after part.\r\n      return [...before, question, ...after];\r\n    });\r\n  };\r\n\r\n  const deleteQuestion = (index: number) => () => {\r\n    // This removes a question at the specified index,\r\n    // but asks for permission to do so.\r\n\r\n    // This function is curried, so the first call of this\r\n    // function sets up so internal state with the index\r\n    // so that we don't have pass in this function a\r\n    // weird way to the children element.\r\n\r\n    // First, ask for permission.\r\n    // We have to say \"window.confirm\" instead of just \"confirm\"\r\n    // because of an ESLint rule.\r\n    const shouldDelete: boolean = window.confirm('Are you sure you want to delete this question?\\nThis cannot be undone!');\r\n\r\n    if (shouldDelete) {\r\n      // If we should delete, the filter out everything that's\r\n      // at the specified index.\r\n      // (This just keeps everything EXCEPT the element at the provided index)\r\n      setQuestionMakers((prev) => prev.filter((_, i) => i !== index));\r\n    }\r\n  };\r\n\r\n  const saveToJSONFile = (data: string, filename: string) => {\r\n    const blob = new Blob([data], { type: 'application/json' });\r\n    const href = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = href;\r\n    link.download = `${filename}.json`;\r\n    document.querySelector('#root')?.appendChild(link);\r\n    link.click();\r\n    document.querySelector('#root')?.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"QuizMaker\">\r\n        <h1>QuizMaker</h1>\r\n        <div id=\"QuestionMakerContainer\">\r\n          {questionMakers.map((question, ind) => (\r\n            <QuestionMaker key={ind} index={ind} question={question} changeQuestionValues={changeQuestionValues} quizLength={questionMakers.length} changeQuestionIndex={changeQuestionIndex} deleteQuestion={deleteQuestion} />\r\n          ))}\r\n        </div>\r\n        <button onClick={addQuestionMaker} className=\"AddQuestionMakerButton\">\r\n          <FontAwesomeIcon icon={faPlus} className=\"AddQuestionMakerIcon\" color=\"white\" size=\"2x\"></FontAwesomeIcon>\r\n        </button>\r\n      </div>\r\n      <br />\r\n      <button onClick={() => setData(JSON.stringify(questionMakers, null, 2))}>render</button>\r\n      <button onClick={() => setShouldLiveUpdate((prev) => !prev)}>live updating: {`${shouldLiveUpdate}`}</button>\r\n      {data && (\r\n        <>\r\n          <br />\r\n          <button onClick={() => navigator.clipboard.writeText(data)}>copy</button>\r\n          <button onClick={() => saveToJSONFile(data, 'data')}>save to JSON file</button>\r\n          <pre>{data}</pre>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport QuizMaker from './components/QuizMaker/QuizMaker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuizMaker />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}